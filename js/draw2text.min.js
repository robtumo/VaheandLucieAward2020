$.noConflict(),
function ($) {
	$.fn.draw2text = function (options) {
		var settings = $.extend({
			lang: "eng",
			width: "100%",
			heightCanvas: "200px",
			backgroundCanvas: "white",
			colorCanvas: "black",
			lineCanvas: "round",
			controls: !0,
			preloader: "img/loader.gif",
			btnTransform: "Transform",
			clearBtn: "Clear",
			quick: !0,
			file: !0,
			calculator: !0
		}, options);
		this.each(function (e) {
			$(this).css("max-width", settings.width), $(this).html('<canvas id="draw-canvas"></canvas>').append('<div id="log"><h3>Text Result <span class="font-size">Font Size<select></select></span></h3><div class="result">...</div></div>'), $("#draw-canvas").wrap('<div id="draw2text">'), $("#draw2text").append('<div class="buttons"><button id="transform" class="btn">' + settings.btnTransform + '</button> <button id="reset" class="btn">' + settings.clearBtn + "</button></div>").prepend('<div id="selector"></div>');
			for (var i = 41; 11 < i; i--) $(".font-size select").append('<option value="' + i + '">' + i + "</option>");
			1 == settings.controls && $("#selector").html('<button class="active pencil">Pencil</button> <button class="eraser">Eraser</button> <input type="range" id="range" min="1" max="100" value="10" />'), 1 == settings.file && $(this).prepend('<div class="file-content"><input id="file" type="file" /></div>');
			var clic = !1,
				x = "",
				y = "",
				empty = !1,
				canvas = document.getElementById("draw-canvas");
			fitToContainer(canvas);
			var cntx = canvas.getContext("2d");

			function fitToContainer(t) {
				t.style.width = "100%", t.style.height = settings.heightCanvas, t.width = t.offsetWidth, t.height = t.offsetHeight
			}

			function getTouchPos(t, e) {
				var n = t.getBoundingClientRect();
				return {
					x: e.touches[0].pageX - n.left,
					y: e.touches[0].pageY - n.top
				}
			}
			cntx.lineCap = settings.lineCanvas, cntx.lineWidth = 10, cntx.fillStyle = settings.backgroundCanvas, cntx.strokeStyle = settings.colorCanvas, cntx.fillRect(0, 0, canvas.width, canvas.height), canvas.addEventListener("mousedown", function (t) {
				clic = !0, cntx.save(), x = t.pageX - this.offsetLeft, y = t.pageY - this.offsetTop
			}, !1), canvas.addEventListener("mouseup", function (t) {
				if (clic = !1, 1 == settings.quick) {
					var e = document.getElementById("draw-canvas");
					if (e && 1 == empty) recognizeFile(e.toDataURL("image/png"));
					else alert("Draw on canvas")
				}
			}, !1), $(document).click(function () {
				clic = !1
			}), canvas.addEventListener("mousemove", function (t) {
				t.preventDefault(), 1 == clic && (cntx.beginPath(), cntx.moveTo(t.pageX - this.offsetLeft, t.pageY - this.offsetTop), cntx.lineTo(x, y), cntx.stroke(), x = t.pageX - this.offsetLeft, y = t.pageY - this.offsetTop, empty = !0)
			}, !1), canvas.addEventListener("touchstart", function (t) {
				mousePos = getTouchPos(canvas, t);
				var e = t.touches[0],
					n = new MouseEvent("mousedown", {
						clientX: e.pageX,
						clientY: e.pageY
					});
				canvas.dispatchEvent(n)
			}, !1), canvas.addEventListener("touchend", function (t) {
				var e = new MouseEvent("mouseup", {});
				canvas.dispatchEvent(e)
			}, !1), canvas.addEventListener("touchmove", function (t) {
				t.preventDefault();
				var e = t.touches[0],
					n = new MouseEvent("mousemove", {
						clientX: e.pageX,
						clientY: e.pageY
					});
				canvas.dispatchEvent(n)
			}, !1);
			var range = 10;

			function progressUpdate(packet) {
				var log = document.getElementById("log");
				"done" == packet.status && ($(".result").html(packet.data.text), 1 == settings.calculator && (result = packet.data.text, -1 <= result.indexOf("+") || -1 <= result.indexOf("-") || -1 <= result.indexOf("/") || -1 <= result.toLowerCase().indexOf("x") || -1 <= result.indexOf("*") ? setTimeout(function () {
					$(".result").html($(".result").html() + " = " + eval(result.replace("x", "*").replace("X", "*")))
				}, 1e3) : $(".result").html($(".result").html() + " = " + result)))
			}

			function recognizeFile(t) {
				document.querySelector(".result").innerHTML = '<div class="preloader"><img src="' + settings.preloader + '" /></div>', Tesseract.recognize(t, {
					lang: settings.lang
				}).progress(function (t) {
					console.info(t), progressUpdate(t)
				}).then(function (t) {
					console.log(t), progressUpdate({
						status: "done",
						data: t
					})
				})
			}
			$("#range").on("change", function () {
				cntx.lineWidth = this.value
			}), $(".pencil").click(function () {
				cntx.strokeStyle = settings.colorCanvas
			}), $(".eraser").click(function () {
				cntx.strokeStyle = settings.backgroundCanvas
			}), $("#file").on("change", function () {
				recognizeFile(window.lastFile = this.files[0])
			}), $(".font-size select").on("change", function () {
				var t = $(this).val();
				$(".result").css("font-size", t + "px")
			}), $("#reset").click(function () {
				cntx.fillRect(0, 0, canvas.width, canvas.height), $(".result").html("..."), empty = !1
			}), $(document).on("click", "#transform", function () {
				var t = document.getElementById("draw-canvas");
				t && 1 == empty && recognizeFile(t.toDataURL("image/png"))
			}), $(document).on("click", "#selector button", function (t) {
				t.preventDefault(), $("#selector button").removeClass("active"), $(this).addClass("active")
			}), 1 == settings.calculator && $("#log").prepend('<img class="calculator" src="img/calculator.png" title="Calculator Active" alt="Calculator Active" />').find(".result").css("padding", "30px 10px 10px 10px")
		})
	}
}(jQuery);